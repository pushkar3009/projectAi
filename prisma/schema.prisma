generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  clerkUserId     String           @unique
  email           String           @unique
  name            String?
  imageUrl        String?
  industry        String           // Required industry field
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  bio             String?
  experience      Int?

  skills          String[]
  assessments     Assessment[]
  resume          Resume?
  coverLetters    CoverLetter[]    // Renamed to plural (optional style improvement)
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float
  questions      Json[]   // Array of question objects
  category       String
  improvementTip String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  content         String
  jobDescription  String?
  companyName     String
  jobTitle        String
  status          String   @default("draft")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id                 String   @id @default(cuid())
  industry           String   @unique // Must match User.industry
  users              User[]   // Back relation
  salaryRanges       Json[]   // Array of salary info objects
  growthRate         Float
  demandLevel        String
  topSkills          String[]
  marketOutlook      String
  keyTrends          String[]
  recommendedSkills  String[]
  lastUpdated        DateTime @default(now())
  nextUpdate         DateTime

  @@index([industry])
}
